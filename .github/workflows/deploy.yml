name: Deploy to DigitalOcean

on:
    push:
        branches: [main]
    workflow_dispatch:

env:
    NODE_VERSION: "20"
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 8

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run linting
              run: pnpm run lint

            - name: Run type check
              run: npx tsc --noEmit

    build-and-deploy:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 8

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build application
              run: pnpm run build

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Deploy to DigitalOcean
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.DROPLET_HOST }}
                  username: ${{ secrets.DROPLET_USER }}
                  key: ${{ secrets.DROPLET_SSH_KEY }}
                  script: |
                      # Navigate to app directory
                      cd /root/tabarro3.ma

                      # Pull latest changes
                      git pull origin main

                      # Update the Docker image reference in compose.yml
                      sed -i 's|image: localhost/tabarro3ma_web|image: ghcr.io/${{ github.repository }}:latest|g' compose.yml

                      # Pull the new image
                      podman pull ghcr.io/${{ github.repository }}:latest

                      # Stop and remove old containers
                      podman-compose down

                      # Start new containers
                      podman-compose up -d

                      # Run database migrations if needed
                      podman-compose run --rm web npx prisma migrate deploy || true

                      # Clean up old images
                      podman image prune -f

            - name: Health check
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.DROPLET_HOST }}
                  username: ${{ secrets.DROPLET_USER }}
                  key: ${{ secrets.DROPLET_SSH_KEY }}
                  script: |
                      # Wait for application to start
                      sleep 30

                      # Check if containers are running
                      podman ps --format "table {{.Names}}\t{{.Status}}"

                      # Test application health
                      curl -f http://localhost:3000/api/health || echo "Health check failed"
